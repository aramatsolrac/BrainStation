{"ast":null,"code":"var _jsxFileName = \"/Users/tamaracarlos/Downloads/local-storage-lab-starter-code/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todoItems: [],\n      theme: 'light'\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault();\n      const item = event.target.todoItem.value;\n      this.setState({\n        todoItems: [...this.state.todoItems, item] // ...spread operator used to copy array https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Copy_an_array\n\n      });\n    };\n\n    this.handleThemeToggle = _event => {\n      this.setState({\n        theme: this.state.theme === 'light' ? 'dark' : 'light'\n      });\n    };\n  }\n\n  /*\n   * For this exercise, try to set and get data from localStorage and use this data to update the todoItems and theme in the state object\n   * You will need to use JSON.parse() to get data from localStorage and convert it to a js array\n   * https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n   */\n  componentDidMount() {// check if localStorage data exists\n    // if localStorage exists update state using setState if data exists\n  }\n  /*\n   * When new items are added try to set localStorage with the array of items\n   * You will need to use JSON.stringify() to format the js array into a string in order to save in localStorage\n   */\n\n\n  render() {\n    // we can conditionally set our CSS class based on current theme value\n    const appClass = this.state.theme === 'dark' ? 'App App--dark' : 'App';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: appClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, \"Todo\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleThemeToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, \"Toggle \", this.state.theme === 'light' ? 'dark 🌙' : 'light ☀️', \" theme\")), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleFormSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"todoItem\",\n      placeholder: \"todo item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, \"add item\")), /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"todo-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, this.state.todoItems.map((item, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, item))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tamaracarlos/Downloads/local-storage-lab-starter-code/src/App.js"],"names":["React","Component","App","state","todoItems","theme","handleFormSubmit","event","preventDefault","item","target","todoItem","value","setState","handleThemeToggle","_event","componentDidMount","render","appClass","map","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BE,KAD0B,GAClB;AACNC,MAAAA,SAAS,EAAE,EADL;AAENC,MAAAA,KAAK,EAAE;AAFD,KADkB;;AAAA,SAoB1BC,gBApB0B,GAoBNC,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACC,cAAN;AACA,YAAMC,IAAI,GAAGF,KAAK,CAACG,MAAN,CAAaC,QAAb,CAAsBC,KAAnC;AACA,WAAKC,QAAL,CAAc;AACZT,QAAAA,SAAS,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,SAAf,EAA0BK,IAA1B,CADC,CAC+B;;AAD/B,OAAd;AAGD,KA1ByB;;AAAA,SAgC1BK,iBAhC0B,GAgCLC,MAAD,IAAY;AAC9B,WAAKF,QAAL,CAAc;AACZR,QAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KAAX,KAAqB,OAArB,GAA+B,MAA/B,GAAwC;AADnC,OAAd;AAGD,KApCyB;AAAA;;AAM1B;AACF;AACA;AACA;AACA;AACEW,EAAAA,iBAAiB,GAAG,CAClB;AACA;AACD;AAED;AACF;AACA;AACA;;;AAmBEC,EAAAA,MAAM,GAAG;AACP;AACA,UAAMC,QAAQ,GAAG,KAAKf,KAAL,CAAWE,KAAX,KAAqB,MAArB,GAA8B,eAA9B,GAAgD,KAAjE;AAEA,wBACE;AAAK,MAAA,SAAS,EAAEa,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,OAAO,EAAE,KAAKJ,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACU,KAAKX,KAAL,CAAWE,KAAX,KAAqB,OAArB,GAA+B,SAA/B,GAA2C,UADrD,WADF,CAFF,eAOE;AAAM,MAAA,QAAQ,EAAE,KAAKC,gBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,UAAxB;AAAmC,MAAA,WAAW,EAAC,WAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,CAPF,eAWE;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKH,KAAL,CAAWC,SAAX,CAAqBe,GAArB,CAAyB,CAACV,IAAD,EAAOW,KAAP,kBACxB;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBX,IAAjB,CADD,CADH,CAXF,CADF;AAmBD;;AA7DyB;;AAgE5B,eAAeP,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todoItems: [],\n    theme: 'light'\n  };\n\n  /*\n   * For this exercise, try to set and get data from localStorage and use this data to update the todoItems and theme in the state object\n   * You will need to use JSON.parse() to get data from localStorage and convert it to a js array\n   * https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n   */\n  componentDidMount() {\n    // check if localStorage data exists\n    // if localStorage exists update state using setState if data exists\n  }\n\n  /*\n   * When new items are added try to set localStorage with the array of items\n   * You will need to use JSON.stringify() to format the js array into a string in order to save in localStorage\n   */\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const item = event.target.todoItem.value;\n    this.setState({\n      todoItems: [...this.state.todoItems, item] // ...spread operator used to copy array https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Copy_an_array\n    });\n  };\n  \n  /*\n   * When theme toggle button is clicked try to set localStorage with the value of theme\n   * Because it's already a string you can save that value into localStorage without using JSON.stringify\n   */\n  handleThemeToggle = (_event) => {\n    this.setState({\n      theme: this.state.theme === 'light' ? 'dark' : 'light'\n    });\n  }\n\n  render() {\n    // we can conditionally set our CSS class based on current theme value\n    const appClass = this.state.theme === 'dark' ? 'App App--dark' : 'App';\n\n    return (\n      <div className={appClass}>\n        <h1>Todo</h1>\n        <p>\n          <button onClick={this.handleThemeToggle}>\n            Toggle {this.state.theme === 'light' ? 'dark 🌙' : 'light ☀️'} theme\n          </button>\n        </p>\n        <form onSubmit={this.handleFormSubmit}>\n          <input type=\"text\" name=\"todoItem\" placeholder=\"todo item\" />\n          <button type=\"submit\">add item</button>\n        </form>\n        <ul className=\"todo-list\">\n          {this.state.todoItems.map((item, index) => (\n            <li key={index}>{item}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}